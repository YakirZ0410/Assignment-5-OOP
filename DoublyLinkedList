package doublyLinkedList;

/**
 * Represents a doubly linked list implementation.
 *
 * @param <T> the type of elements stored in the list
 */
public class DoublyLinkedList<T> implements Listl<T> {

    private Node<T> head;
    private Node<T> tail;

    /**
     * Constructs an empty doubly linked list.
     */
    public DoublyLinkedList() {
        this.head = null;
        this.tail = null;
    }

    /**
     * Checks if the doubly linked list is empty.
     *
     * @return true if the list is empty, false otherwise
     */
    public boolean isEmpty() {
        return head == null && tail == null;
    }

    /**
     * Returns the size of the doubly linked list.
     *
     * @return the size of the list
     */
    public int size() {
        int count = 0;
        Node<T> current = head;

        while (current != null) {
            count++;
            current = current.getNext();
        }

        return count;
    }

    /**
     * Adds an element to the beginning of the doubly linked list.
     *
     * @param data the element to be added
     */
    public void addFirst(T data) {
        Node<T> newNode = new Node<>(data);

        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.setNext(head);
            head.setPrevious(newNode);
            head = newNode;
        }
    }

    /**
     * Adds an element to the end of the doubly linked list.
     *
     * @param data the element to be added
     */
    public void addLast(T data) {
        Node<T> newNode = new Node<>(data);

        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            Node<T> current = head;
            while (current.getNext() != null)
                current = current.getNext();

            current.setNext(newNode);
            newNode.setPrevious(current);
            tail = newNode;
        }
    }

    /**
     * Removes the first occurrence of the specified element from the doubly linked list.
     *
     * @param data the element to be removed
     * @return the removed node containing the data, or null if the element was not found
     */
    public Node<T> remove(T data) {
        if (isEmpty())
            return null;

        Node<T> current = head;
        while (current != null) {
            if (current.getData().equals(data)) {
                Node<T> previous = current.getPrevious();
                Node<T> next = current.getNext();

                if (previous == null) {
                    head = next;
                } else {
                    previous.setNext(next);
                }

                if (next == null) {
                    tail = previous;
                } else {
                    next.setPrevious(previous);
                }

                return current;
            }
            current = current.getNext();
        }

        return null;
    }

    /**
     * Clears all elements from the doubly linked list.
     */
    public void clear() {
        this.head = null;
        this.tail = null;
    }

    /**
     * Checks if the doubly linked list contains the specified element.
     *
     * @param data the element to be checked
     * @return true if the element is found, false otherwise
     */
    public boolean contains(T data) {
        if (isEmpty())
            return false;

        Node<T> current = head;
        while (current != null) {
            if (current.getData().equals(data))
                return true;
            if (current.getNext() == null)
                return false;
            current = current.getNext();
        }
        return false;
    }

    /**
     * Prints the elements of the doubly linked list in forward order.
     */
    public void printForward() {
        Node<T> current = head;
        while (current != null) {
            System.out.print(current.getData() + " ");
            current = current.getNext();
        }
        System.out.println();
    }

    /**
     * Prints the elements of the doubly linked list in backward order.
     */
    public void printBackward() {
        Node<T> current = tail;
        while (current != null) {
            System.out.print(current.getData() + " ");
            current = current.getPrevious();
        }
        System.out.println();
    }
}
